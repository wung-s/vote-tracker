package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	uuid "github.com/satori/go.uuid"
	"github.com/wung-s/gotv/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (User)
// DB Table: Plural (users)
// Resource: Plural (Users)
// Path: Plural (/users)
// View Template Folder: Plural (/templates/users/)

type UserParams struct {
	AuthID uuid.UUID `json:"auth_id" db:"auth_id"`
	RoleID uuid.UUID `json:"role_id" db:"role_id"`
	Email  string    `json:"email" db:"email"`
}

// UsersShow gets the data for one User. This function is mapped to
// the path GET /users/{user_id}
func UsersShow(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.JSON(user))
}

// UsersCreate adds a User to the DB. This function is mapped to the
// path POST /users
func UsersCreate(c buffalo.Context) error {
	// Allocate an empty User
	user := &models.User{}
	userRole := &models.UserRole{}
	userParams := &UserParams{}
	// Bind user to the html form elements
	if err := c.Bind(userParams); err != nil {
		return errors.WithStack(err)
	}

	user.AuthID = userParams.AuthID
	user.Email = userParams.Email

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	exist, err := tx.Where("id = ?", userParams.RoleID).Exists("roles")
	if err != nil {
		return errors.WithStack(err)
	}

	if !exist {
		return c.Render(500, r.JSON("Role not found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(user)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	userRole.UserID = user.ID
	userRole.RoleID = userParams.RoleID

	verrs, err = tx.ValidateAndCreate(userRole)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// return verrs
		return c.Error(400, verrs)
	}

	return c.Render(201, r.JSON(user))
}

// UsersUpdate changes a User in the DB. This function is mapped to
// the path PUT /users/{user_id}
func UsersUpdate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind User to the html form elements
	if err := c.Bind(user); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(user)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(user))
}
