package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/wung-s/gotv/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Poll)
// DB Table: Plural (polls)
// Resource: Plural (Polls)
// Path: Plural (/polls)
// View Template Folder: Plural (/templates/polls/)

// PollsList gets all Polls. This function is mapped to the path
// GET /polls
func PollsList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	polls := &models.Polls{}

	// Retrieve all Polls from the DB
	if err := tx.All(polls); err != nil {
		return errors.WithStack(err)
	}

	type PollWithMembers struct {
		Poll    models.Poll    `json:"poll"`
		Members models.Members `json:"members"`
	}

	type PollsWithMembers []PollWithMembers

	result := PollsWithMembers{}

	// retrieve members of each pole
	for _, v := range *polls {
		members := &models.Members{}

		if err := tx.Where("poll_id = ?", v.ID).All(members); err != nil {
			return errors.WithStack(err)
		}
		tmp := PollWithMembers{
			Poll:    v,
			Members: *members,
		}

		result = append(result, tmp)
	}

	return c.Render(200, r.JSON(result))
}
