package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/wung-s/gotv/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Recruiter)
// DB Table: Plural (recruiters)
// Resource: Plural (Recruiters)
// Path: Plural (/recruiters)
// View Template Folder: Plural (/templates/recruiters/)

// RecruitersResource is the resource for the Recruiter model
type RecruitersResource struct {
	buffalo.Resource
}

// RecruitersList gets all Recruiters. This function is mapped to the path
// GET /recruiters
func RecruitersList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	recruiters := &models.Recruiters{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Recruiters from the DB
	if err := q.All(recruiters); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the headers so clients know how to paginate.
	c.Response().Header().Set("X-Pagination", q.Paginator.String())

	result := struct {
		models.Recruiters  `json:"recruiters"`
		Page               int `json:"page"`
		PerPage            int `json:"perPage"`
		Offset             int `json:"offset"`
		TotalEntriesSize   int `json:"totalEntriesSize"`
		CurrentEntriesSize int `json:"currentEntriesSize"`
		TotalPages         int `json:"totalPages"`
	}{
		*recruiters,
		q.Paginator.Page,
		q.Paginator.PerPage,
		q.Paginator.Offset,
		q.Paginator.TotalEntriesSize,
		q.Paginator.CurrentEntriesSize,
		q.Paginator.TotalPages,
	}

	return c.Render(200, r.JSON(result))
}

// Show gets the data for one Recruiter. This function is mapped to
// the path GET /recruiters/{recruiter_id}
func (v RecruitersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	// To find the Recruiter the parameter recruiter_id is used.
	if err := tx.Find(recruiter, c.Param("recruiter_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.JSON(recruiter))
}

// New default implementation. Returns a 404
func (v RecruitersResource) New(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// Create adds a Recruiter to the DB. This function is mapped to the
// path POST /recruiters
func (v RecruitersResource) Create(c buffalo.Context) error {
	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	// Bind recruiter to the html form elements
	if err := c.Bind(recruiter); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(recruiter)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(201, r.JSON(recruiter))
}

// Edit default implementation. Returns a 404
func (v RecruitersResource) Edit(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// RecruitersUpdate changes a Recruiter in the DB. This function is mapped to
// the path PUT /recruiters/{recruiter_id}
func RecruitersUpdate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	if err := tx.Find(recruiter, c.Param("id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Recruiter to the html form elements
	if err := c.Bind(recruiter); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(recruiter)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(recruiter))
}

// Destroy deletes a Recruiter from the DB. This function is mapped
// to the path DELETE /recruiters/{recruiter_id}
func (v RecruitersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	// To find the Recruiter the parameter recruiter_id is used.
	if err := tx.Find(recruiter, c.Param("recruiter_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(recruiter); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.JSON(recruiter))
}
