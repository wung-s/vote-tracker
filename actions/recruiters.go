package actions

import (
	"os"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/uuid"
	"github.com/pkg/errors"
	"github.com/wung-s/gotv/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Recruiter)
// DB Table: Plural (recruiters)
// Resource: Plural (Recruiters)
// Path: Plural (/recruiters)
// View Template Folder: Plural (/templates/recruiters/)

// RecruitersResource is the resource for the Recruiter model
type RecruitersResource struct {
	buffalo.Resource
}

type InvitationParams struct {
	URL string `json:"url"`
}

// RecruitersList gets all Recruiters. This function is mapped to the path
// GET /recruiters
func RecruitersList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// recruiters := &models.Recruiters{}

	sql := `SELECT recruiters.id, name, phone_no, invited, notification_enabled, voted, supporter, total FROM recruiters INNER JOIN
						(select recruiters.id,
       				count(voted) filter (where voted = true) as voted,
	   					count(supporter) filter (where supporter = true) as supporter,
	   					count(recruiter_id) as total
	   				from public.recruiters LEFT JOIN public.members on members.recruiter_id = recruiters.id
	   				group by recruiters.id) AS recruiters_stat on recruiters_stat.id = recruiters.id`
	q := tx.RawQuery(sql)
	type result struct {
		ID                  uuid.UUID `json:"id"`
		Name                string    `json:"name" db:"name"`
		PhoneNo             string    `json:"phoneNo" db:"phone_no"`
		Invited             bool      `json:"invited" db:"invited"`
		NotificationEnabled bool      `json:"notificationEnabled" db:"notification_enabled"`
		Voted               int       `json:"voted" db:"voted"`
		Supporter           int       `json:"supporter" db:"supporter"`
		Total               int       `json:"total" db:"total"`
	}

	recruiters := []result{}

	// err := q.All(recruiters)
	// Retrieve all Recruiters from the DB
	if err := q.All(&recruiters); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.JSON(recruiters))
}

// RecruitersShow gets the data for one Recruiter. This function is mapped to
// the path GET /recruiters/{recruiter_id}
func RecruitersShow(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}
	// To find the Recruiter the parameter recruiter_id is used.
	if err := tx.Find(recruiter, c.Param("id")); err != nil {
		return c.Error(404, err)
	}

	type MemberStats struct {
		Total     int `json:"total"`
		Voted     int `json:"voted"`
		Supporter int `json:"supporter"`
	}

	votedCnt, err := tx.BelongsTo(recruiter).Where("voted = ?", true).Count("members")
	if err != nil {
		return errors.WithStack(err)
	}

	supporterCnt, err := tx.BelongsTo(recruiter).Where("supporter = ?", true).Count("members")
	if err != nil {
		return errors.WithStack(err)
	}

	totalCnt, err := tx.BelongsTo(recruiter).Count("members")
	if err != nil {
		return errors.WithStack(err)
	}

	s := MemberStats{totalCnt, votedCnt, supporterCnt}

	result := struct {
		models.Recruiter
		MemberStatistic MemberStats `json:"memberStatistic"`
	}{
		*recruiter,
		s,
	}

	return c.Render(200, r.JSON(result))
}

// New default implementation. Returns a 404
func (v RecruitersResource) New(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// Create adds a Recruiter to the DB. This function is mapped to the
// path POST /recruiters
func (v RecruitersResource) Create(c buffalo.Context) error {
	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	// Bind recruiter to the html form elements
	if err := c.Bind(recruiter); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(recruiter)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(201, r.JSON(recruiter))
}

// Edit default implementation. Returns a 404
func (v RecruitersResource) Edit(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// RecruitersUpdate changes a Recruiter in the DB. This function is mapped to
// the path PUT /recruiters/{recruiter_id}
func RecruitersUpdate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	if err := tx.Find(recruiter, c.Param("id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Recruiter to the html form elements
	if err := c.Bind(recruiter); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(recruiter)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(recruiter))
}

// RecruitersInvite changes a Recruiter in the DB. This function is mapped to
// the path PUT /recruiters/{recruiter_id}
func RecruitersInvite(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	if err := tx.Find(recruiter, c.Param("id")); err != nil {
		return c.Error(404, err)
	}

	iParams := &InvitationParams{}

	// Bind Recruiter to the html form elements
	if err := c.Bind(iParams); err != nil {
		return errors.WithStack(err)
	}

	if recruiter.NotificationEnabled == false {
		msg := struct {
			Message string `json:"message"`
		}{
			"Please enable notification first",
		}
		return c.Render(301, r.JSON(msg))
	}

	SendSms(
		"+1"+recruiter.PhoneNo,
		os.Getenv("TWILIO_NO"),
		"Hello "+recruiter.Name+", you've been invited. Please click on "+iParams.URL+"/"+recruiter.ID.String(),
	)

	recruiter.Invited = true
	verrs, err := tx.ValidateAndUpdate(recruiter)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(recruiter))
}

// RecruitersInviteAll changes a Recruiter in the DB. This function is mapped to
// the path PUT /recruiters/{recruiter_id}
func RecruitersInviteAll(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiters := &models.Recruiters{}

	iParams := &InvitationParams{}

	if err := c.Bind(iParams); err != nil {
		return errors.WithStack(err)
	}

	if err := tx.Where("notification_enabled = ?", true).All(recruiters); err != nil {
		return errors.WithStack(err)
	}

	for _, r := range *recruiters {
		SendSms(
			"+1"+r.PhoneNo,
			os.Getenv("TWILIO_NO"),
			"Hello "+r.Name+", you've been invited. Please click on "+iParams.URL+"/"+r.ID.String(),
		)

		if r.Invited == false {
			r.Invited = true
			tx.ValidateAndUpdate(&r)
		}
	}

	result := struct {
		Message string `json:"message"`
	}{
		"Sms sent to recruiters successfully",
	}

	return c.Render(200, r.JSON(result))
}

// Destroy deletes a Recruiter from the DB. This function is mapped
// to the path DELETE /recruiters/{recruiter_id}
func (v RecruitersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Recruiter
	recruiter := &models.Recruiter{}

	// To find the Recruiter the parameter recruiter_id is used.
	if err := tx.Find(recruiter, c.Param("recruiter_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(recruiter); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.JSON(recruiter))
}
